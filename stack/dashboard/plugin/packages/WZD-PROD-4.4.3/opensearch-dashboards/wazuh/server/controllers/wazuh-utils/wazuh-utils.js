"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.WazuhUtilsCtrl = void 0;

var _errorResponse = require("../../lib/error-response");

var _getConfiguration = require("../../lib/get-configuration");

var _readLastLines = require("read-last-lines");

var _updateConfiguration = require("../../lib/update-configuration");

var _jwtDecode = _interopRequireDefault(require("jwt-decode"));

var _constants = require("../../../common/constants");

var _manageHosts = require("../../lib/manage-hosts");

var _cookie = require("../../lib/cookie");

var _fs = _interopRequireDefault(require("fs"));

var _path = _interopRequireDefault(require("path"));

var _filesystem = require("../../lib/filesystem");

var _glob = _interopRequireDefault(require("glob"));

var _fileExtension = require("../../../common/services/file-extension");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const updateConfigurationFile = new _updateConfiguration.UpdateConfigurationFile(); // TODO: these controllers have no logs. We should include them.

class WazuhUtilsCtrl {
  /**
   * Constructor
   * @param {*} server
   */
  constructor() {
    _defineProperty(this, "updateConfigurationFile", this.routeDecoratorProtectedAdministratorRoleValidToken(async (context, request, response) => {
      let requiresRunningHealthCheck = false,
          requiresReloadingBrowserTab = false,
          requiresRestartingPluginPlatform = false; // Plugin settings configurables in the configuration file.

      const pluginSettingsConfigurableFile = Object.keys(request.body).filter(pluginSettingKey => _constants.PLUGIN_SETTINGS[pluginSettingKey].isConfigurableFromFile).reduce((accum, pluginSettingKey) => ({ ...accum,
        [pluginSettingKey]: request.body[pluginSettingKey]
      }), {});

      if (Object.keys(pluginSettingsConfigurableFile).length) {
        // Update the configuration file.
        await updateConfigurationFile.updateConfiguration(pluginSettingsConfigurableFile);
        requiresRunningHealthCheck = Object.keys(pluginSettingsConfigurableFile).some(pluginSettingKey => Boolean(_constants.PLUGIN_SETTINGS[pluginSettingKey].requiresRunningHealthCheck)) || requiresRunningHealthCheck;
        requiresReloadingBrowserTab = Object.keys(pluginSettingsConfigurableFile).some(pluginSettingKey => Boolean(_constants.PLUGIN_SETTINGS[pluginSettingKey].requiresReloadingBrowserTab)) || requiresReloadingBrowserTab;
        requiresRestartingPluginPlatform = Object.keys(pluginSettingsConfigurableFile).some(pluginSettingKey => Boolean(_constants.PLUGIN_SETTINGS[pluginSettingKey].requiresRestartingPluginPlatform)) || requiresRestartingPluginPlatform;
      }

      ;
      return response.ok({
        body: {
          data: {
            requiresRunningHealthCheck,
            requiresReloadingBrowserTab,
            requiresRestartingPluginPlatform,
            updatedConfiguration: pluginSettingsConfigurableFile
          }
        }
      });
    }, 3021));

    _defineProperty(this, "uploadFile", this.routeDecoratorProtectedAdministratorRoleValidToken(async (context, request, response) => {
      const {
        key
      } = request.params;
      const {
        file: bufferFile
      } = request.body;
      const pluginSetting = _constants.PLUGIN_SETTINGS[key]; // Check file extension

      const fileExtension = (0, _fileExtension.getFileExtensionFromBuffer)(bufferFile); // Check if the extension is valid for the setting.

      if (!pluginSetting.options.file.extensions.includes(`.${fileExtension}`)) {
        return response.badRequest({
          body: `File extension is not valid for setting [${key}] setting. Allowed file extensions: ${pluginSetting.options.file.extensions.join(', ')}`
        });
      }

      ;
      const fileNamePath = `${key}.${fileExtension}`; // Create target directory

      const targetDirectory = _path.default.join(__dirname, '../../..', pluginSetting.options.file.store.relativePathFileSystem);

      (0, _filesystem.createDirectoryIfNotExists)(targetDirectory); // Get the files related to the setting and remove them

      const files = _glob.default.sync(_path.default.join(targetDirectory, `${key}.*`));

      files.forEach(_fs.default.unlinkSync); // Store the file in the target directory.

      _fs.default.writeFileSync(_path.default.join(targetDirectory, fileNamePath), bufferFile); // Update the setting in the configuration cache


      const pluginSettingValue = pluginSetting.options.file.store.resolveStaticURL(fileNamePath);
      await updateConfigurationFile.updateConfiguration({
        [key]: pluginSettingValue
      });
      return response.ok({
        body: {
          data: {
            requiresRunningHealthCheck: Boolean(pluginSetting.requiresRunningHealthCheck),
            requiresReloadingBrowserTab: Boolean(pluginSetting.requiresReloadingBrowserTab),
            requiresRestartingPluginPlatform: Boolean(pluginSetting.requiresRestartingPluginPlatform),
            updatedConfiguration: {
              [key]: pluginSettingValue
            }
          }
        }
      });
    }, 3022));

    _defineProperty(this, "deleteFile", this.routeDecoratorProtectedAdministratorRoleValidToken(async (context, request, response) => {
      const {
        key
      } = request.params;
      const pluginSetting = _constants.PLUGIN_SETTINGS[key]; // Get the files related to the setting and remove them

      const targetDirectory = _path.default.join(__dirname, '../../..', pluginSetting.options.file.store.relativePathFileSystem);

      const files = _glob.default.sync(_path.default.join(targetDirectory, `${key}.*`));

      files.forEach(_fs.default.unlinkSync); // Update the setting in the configuration cache

      const pluginSettingValue = pluginSetting.defaultValue;
      await updateConfigurationFile.updateConfiguration({
        [key]: pluginSettingValue
      });
      return response.ok({
        body: {
          message: 'All files were removed and the configuration file was updated.',
          data: {
            requiresRunningHealthCheck: Boolean(pluginSetting.requiresRunningHealthCheck),
            requiresReloadingBrowserTab: Boolean(pluginSetting.requiresReloadingBrowserTab),
            requiresRestartingPluginPlatform: Boolean(pluginSetting.requiresRestartingPluginPlatform),
            updatedConfiguration: {
              [key]: pluginSettingValue
            }
          }
        }
      });
    }, 3023));

    this.manageHosts = new _manageHosts.ManageHosts();
  }
  /**
   * Returns the wazuh.yml file parsed
   * @param {Object} context
   * @param {Object} request
   * @param {Object} response
   * @returns {Object} Configuration File or ErrorResponse
   */


  getConfigurationFile(context, request, response) {
    try {
      const configFile = (0, _getConfiguration.getConfiguration)();
      return response.ok({
        body: {
          statusCode: 200,
          error: 0,
          data: configFile || {}
        }
      });
    } catch (error) {
      return (0, _errorResponse.ErrorResponse)(error.message || error, 3019, 500, response);
    }
  }
  /**
   * Returns the wazuh.yml file in raw
   * @param {Object} context
   * @param {Object} request
   * @param {Object} response
   * @returns {Object} Configuration File or ErrorResponse
   */


  /**
   * Returns Wazuh app logs
   * @param {Object} context
   * @param {Object} request
   * @param {Object} response
   * @returns {Array<String>} app logs or ErrorResponse
   */
  async getAppLogs(context, request, response) {
    try {
      const lastLogs = await (0, _readLastLines.read)(_constants.WAZUH_DATA_LOGS_RAW_PATH, 50);
      const spliterLog = lastLogs.split('\n');
      return spliterLog && Array.isArray(spliterLog) ? response.ok({
        body: {
          error: 0,
          lastLogs: spliterLog.filter(item => typeof item === 'string' && item.length)
        }
      }) : response.ok({
        error: 0,
        lastLogs: []
      });
    } catch (error) {
      return (0, _errorResponse.ErrorResponse)(error.message || error, 3036, 500, response);
    }
  }
  /**
   * Upload a file
   * @param {Object} context
   * @param {Object} request
   * @param {Object} response
   * @returns {Object} Configuration File or ErrorResponse
   */


  routeDecoratorProtectedAdministratorRoleValidToken(routeHandler, errorCode) {
    return async (context, request, response) => {
      try {
        // Check if user has administrator role in token
        const token = (0, _cookie.getCookieValueByName)(request.headers.cookie, 'wz-token');

        if (!token) {
          return (0, _errorResponse.ErrorResponse)('No token provided', 401, 401, response);
        }

        ;
        const decodedToken = (0, _jwtDecode.default)(token);

        if (!decodedToken) {
          return (0, _errorResponse.ErrorResponse)('No permissions in token', 401, 401, response);
        }

        ;

        if (!decodedToken.rbac_roles || !decodedToken.rbac_roles.includes(_constants.WAZUH_ROLE_ADMINISTRATOR_ID)) {
          return (0, _errorResponse.ErrorResponse)('No administrator role', 401, 401, response);
        }

        ; // Check the provided token is valid

        const apiHostID = (0, _cookie.getCookieValueByName)(request.headers.cookie, 'wz-api');

        if (!apiHostID) {
          return (0, _errorResponse.ErrorResponse)('No API id provided', 401, 401, response);
        }

        ;
        const responseTokenIsWorking = await context.wazuh.api.client.asCurrentUser.request('GET', '/', {}, {
          apiHostID
        });

        if (responseTokenIsWorking.status !== 200) {
          return (0, _errorResponse.ErrorResponse)('Token is not valid', 401, 401, response);
        }

        ;
        return await routeHandler(context, request, response);
      } catch (error) {
        return (0, _errorResponse.ErrorResponse)(error.message || error, errorCode, 500, response);
      }
    };
  }

}

exports.WazuhUtilsCtrl = WazuhUtilsCtrl;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,