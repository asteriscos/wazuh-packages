"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.WazuhApiRoutes = WazuhApiRoutes;

var _controllers = require("../controllers");

var _configSchema = require("@osd/config-schema");

function WazuhApiRoutes(router) {
  const ctrl = new _controllers.WazuhApiCtrl(); // Returns if the wazuh-api configuration is working

  router.post({
    path: '/api/check-stored-api',
    validate: {
      body: _configSchema.schema.object({
        id: _configSchema.schema.string(),
        idChanged: _configSchema.schema.maybe(_configSchema.schema.string())
      })
    }
  }, async (context, request, response) => ctrl.checkStoredAPI(context, request, response)); // Check if credentials on POST connect to Wazuh API. Not storing them!
  // Returns if the wazuh-api configuration received in the POST body will work

  router.post({
    path: '/api/check-api',
    validate: {
      body: _configSchema.schema.any({// TODO: not ready
        //id: schema.string(),
        // url: schema.string(),
        // port: schema.number(),
        // username: schema.string(),
        //forceRefresh: schema.boolean({defaultValue:false}),
        // cluster_info: schema.object({
        //   status: schema.string(),
        //   manager: schema.string(),
        //   node: schema.string(),
        //   cluster: schema.string()
        // }),
        // run_as: schema.boolean(),
        // extensions: schema.any(),
        // allow_run_as: schema.number()
      })
    }
  }, async (context, request, response) => ctrl.checkAPI(context, request, response));
  router.post({
    path: '/api/login',
    validate: {
      body: _configSchema.schema.object({
        idHost: _configSchema.schema.string(),
        force: _configSchema.schema.boolean({
          defaultValue: false
        })
      })
    }
  }, async (context, request, response) => ctrl.getToken(context, request, response)); // Returns the request result (With error control)

  router.post({
    path: '/api/request',
    validate: {
      body: _configSchema.schema.object({
        id: _configSchema.schema.string(),
        method: _configSchema.schema.string(),
        path: _configSchema.schema.string(),
        body: _configSchema.schema.any()
      })
    }
  }, async (context, request, response) => ctrl.requestApi(context, request, response)); // Returns data from the Wazuh API on CSV readable format

  router.post({
    path: '/api/csv',
    validate: {
      body: _configSchema.schema.object({
        id: _configSchema.schema.string(),
        path: _configSchema.schema.string(),
        filters: _configSchema.schema.maybe(_configSchema.schema.any())
      })
    }
  }, async (context, request, response) => ctrl.csv(context, request, response)); // Returns a route list used by the Dev Tools

  router.get({
    path: '/api/routes',
    validate: false
  }, async (context, request, response) => ctrl.getRequestList(context, request, response)); // Useful to check cookie consistence

  router.get({
    path: '/api/timestamp',
    validate: false
  }, async (context, request, response) => ctrl.getTimeStamp(context, request, response));
  router.post({
    path: '/api/extensions',
    validate: {
      body: _configSchema.schema.object({
        id: _configSchema.schema.string(),
        extensions: _configSchema.schema.any()
      })
    }
  }, async (context, request, response) => ctrl.setExtensions(context, request, response));
  router.get({
    path: '/api/extensions/{id}',
    validate: {
      params: _configSchema.schema.object({
        id: _configSchema.schema.string()
      })
    }
  }, async (context, request, response) => ctrl.getExtensions(context, request, response)); // Return Wazuh Appsetup info

  router.get({
    path: '/api/setup',
    validate: false
  }, async (context, request, response) => ctrl.getSetupInfo(context, request, response)); // Return basic information of syscollector for given agent

  router.get({
    path: '/api/syscollector/{agent}',
    validate: {
      params: _configSchema.schema.object({
        agent: _configSchema.schema.string()
      })
    }
  }, async (context, request, response) => ctrl.getSyscollector(context, request, response)); // Return logged in user has wazuh disabled by role

  router.get({
    path: '/api/check-wazuh',
    validate: false
  }, async (context, request, response) => ctrl.isWazuhDisabled(context, request, response)); // Return app logos configuration

  router.get({
    path: '/api/logos',
    validate: false,
    options: {
      authRequired: false
    }
  }, async (context, request, response) => ctrl.getAppLogos(context, request, response));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,