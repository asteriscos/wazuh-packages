"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SchedulerJob = void 0;

var _predefinedJobs = require("./predefined-jobs");

var _wazuhHosts = require("../../controllers/wazuh-hosts");

var _index = require("./index");

var _errorHandler = require("./error-handler");

var _configuredJobs = require("./configured-jobs");

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const wazuhHostsController = new _wazuhHosts.WazuhHostsCtrl();
const fakeResponseEndpoint = {
  ok: body => body,
  custom: body => body
};

class SchedulerJob {
  constructor(jobName, context) {
    _defineProperty(this, "jobName", void 0);

    _defineProperty(this, "saveDocument", void 0);

    _defineProperty(this, "context", void 0);

    _defineProperty(this, "logger", void 0);

    _defineProperty(this, "apiClient", void 0);

    this.jobName = jobName;
    this.context = context;
    this.logger = context.wazuh.logger;
    this.apiClient = context.wazuh.api.client.asInternalUser;
    this.saveDocument = new _index.SaveDocument(context);
  }

  async run() {
    const {
      index,
      status
    } = (0, _configuredJobs.configuredJobs)({})[this.jobName];

    if (!status) {
      return;
    }

    try {
      const hosts = await this.getApiObjects();
      const jobPromises = hosts.map(async host => {
        try {
          const {
            status
          } = (0, _configuredJobs.configuredJobs)({
            host,
            jobName: this.jobName
          })[this.jobName];
          if (!status) return;
          return await this.getResponses(host);
        } catch (error) {
          (0, _errorHandler.ErrorHandler)(error, this.logger);
        }
      });
      const data = (await Promise.all(jobPromises)).filter(promise => !!promise).flat();
      Array.isArray(data) && !!data.length && (await this.saveDocument.save(data, index));
    } catch (error) {
      (0, _errorHandler.ErrorHandler)(error, this.logger);
    }
  }

  async getApiObjects() {
    const {
      apis
    } = _predefinedJobs.jobs[this.jobName];
    const hostsResponse = await wazuhHostsController.getHostsEntries(false, false, fakeResponseEndpoint);
    if (!hostsResponse.body.length) throw {
      error: 10001,
      message: 'No Wazuh host configured in wazuh.yml'
    };

    if (apis && apis.length) {
      return this.filterHosts(hostsResponse.body, apis);
    }

    return hostsResponse.body;
  }

  filterHosts(hosts, apis) {
    const filteredHosts = hosts.filter(host => apis.includes(host.id));

    if (filteredHosts.length <= 0) {
      throw {
        error: 10002,
        message: 'No host was found with the indicated ID'
      };
    }

    return filteredHosts;
  }

  async getResponses(host) {
    const {
      request,
      params
    } = _predefinedJobs.jobs[this.jobName];
    const data = [];

    if (typeof request === 'string') {
      const apiResponse = await this.apiClient.request('GET', request, params, {
        apiHostID: host.id
      });
      data.push({ ...apiResponse.data,
        apiName: host.id
      });
    } else {
      await this.getResponsesForIRequest(host, data);
    }

    return data;
  }

  async getResponsesForIRequest(host, data) {
    const {
      request,
      params
    } = _predefinedJobs.jobs[this.jobName];
    const fieldName = this.getParamName(typeof request !== 'string' && request.request);
    const paramList = await this.getParamList(fieldName, host);

    for (const param of paramList) {
      const paramRequest = typeof request !== 'string' && request.request.replace(/\{.+\}/, param);

      if (!!paramRequest) {
        const apiResponse = await this.apiClient.request('GET', paramRequest, params, {
          apiHostID: host.id
        });
        data.push({ ...apiResponse.data,
          apiName: host.id,
          [fieldName]: param
        });
      }
    }
  }

  getParamName(request) {
    const regexResult = /\{(?<fieldName>.+)\}/.exec(request);
    if (regexResult === null) throw {
      error: 10003,
      message: `The parameter is not found in the Request: ${request}`
    }; // @ts-ignore

    const {
      fieldName
    } = regexResult.groups;
    if (fieldName === undefined || fieldName === '') throw {
      error: 10004,
      message: `Invalid field in the request: {request: ${request}, field: ${fieldName}}`
    };
    return fieldName;
  }

  async getParamList(fieldName, host) {
    const {
      request
    } = _predefinedJobs.jobs[this.jobName]; // @ts-ignore

    const apiResponse = await this.apiClient.request('GET', request.params[fieldName].request, {}, {
      apiHostID: host.id
    });
    const {
      affected_items
    } = apiResponse.data.data;
    if (affected_items === undefined || affected_items.length === 0) throw {
      error: 10005,
      message: `Empty response when tried to get the parameters list: ${JSON.stringify(apiResponse.data)}`
    };
    const values = affected_items.map(this.mapParamList);
    return values;
  }

  mapParamList(item) {
    if (typeof item !== 'object') {
      return item;
    }

    ;
    const keys = Object.keys(item);
    if (keys.length > 1 || keys.length < 0) throw {
      error: 10006,
      message: `More than one key or none were obtained: ${keys}`
    };
    return item[keys[0]];
  }

}

exports.SchedulerJob = SchedulerJob;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,