"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.jobSchedulerRun = jobSchedulerRun;

var _index = require("./index");

var _configuredJobs = require("./configured-jobs");

var _logger = require("../../lib/logger");

var _getConfiguration = require("../../lib/get-configuration");

var _nodeCron = _interopRequireDefault(require("node-cron"));

var _constants = require("../../../common/constants");

var _statisticsTemplate = require("../../integration-files/statistics-template");

var _utils = require("../../../common/utils");

var _settings = require("../../../common/services/settings");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const blueWazuh = '\u001b[34mwazuh\u001b[39m';
const schedulerErrorLogColors = [blueWazuh, 'scheduler', 'error'];
const schedulerJobs = [];
/**
* Wait until Kibana server is ready
*/

const checkPluginPlatformStatus = async function (context) {
  try {
    (0, _logger.log)('scheduler-handler:checkPluginPlatformStatus', 'Waiting for Kibana and Elasticsearch servers to be ready...', 'debug');
    await checkElasticsearchServer(context);
    await checkTemplate(context);
    return;
  } catch (error) {
    (0, _logger.log)('scheduler-handler:checkPluginPlatformStatus', error.mesage || error);

    try {
      await (0, _utils.delayAsPromise)(3000);
      await checkPluginPlatformStatus(context);
    } catch (error) {}

    ;
  }
};
/**
 * Check Elasticsearch Server status and Kibana index presence
 */


const checkElasticsearchServer = async function (context) {
  try {
    const data = await context.core.opensearch.client.asInternalUser.indices.exists({
      index: context.server.config.opensearchDashboards.index
    });
    return data.body;
  } catch (error) {
    (0, _logger.log)('scheduler-handler:checkElasticsearchServer', error.message || error);
    return Promise.reject(error);
  }
};
/**
* Verify wazuh-statistics template
*/


const checkTemplate = async function (context) {
  try {
    (0, _logger.log)('scheduler-handler:checkTemplate', 'Updating the statistics template', 'debug');
    const appConfig = await (0, _getConfiguration.getConfiguration)();
    const prefixTemplateName = appConfig['cron.prefix'] || (0, _settings.getSettingDefaultValue)('cron.prefix');
    const statisticsIndicesTemplateName = appConfig['cron.statistics.index.name'] || (0, _settings.getSettingDefaultValue)('cron.statistics.index.name');
    const pattern = `${prefixTemplateName}-${statisticsIndicesTemplateName}-*`;

    try {
      // Check if the template already exists
      const currentTemplate = await context.core.opensearch.client.asInternalUser.indices.getTemplate({
        name: _constants.WAZUH_STATISTICS_TEMPLATE_NAME
      }); // Copy already created index patterns

      _statisticsTemplate.statisticsTemplate.index_patterns = currentTemplate.body[_constants.WAZUH_STATISTICS_TEMPLATE_NAME].index_patterns;
    } catch (error) {
      // Init with the default index pattern
      _statisticsTemplate.statisticsTemplate.index_patterns = [pattern];
    } // Check if the user is using a custom pattern and add it to the template if it does


    if (!_statisticsTemplate.statisticsTemplate.index_patterns.includes(pattern)) {
      _statisticsTemplate.statisticsTemplate.index_patterns.push(pattern);
    }

    ; // Update the statistics template

    await context.core.opensearch.client.asInternalUser.indices.putTemplate({
      name: _constants.WAZUH_STATISTICS_TEMPLATE_NAME,
      body: _statisticsTemplate.statisticsTemplate
    });
    (0, _logger.log)('scheduler-handler:checkTemplate', 'Updated the statistics template', 'debug');
  } catch (error) {
    const errorMessage = `Something went wrong updating the statistics template ${error.message || error}`;
    (0, _logger.log)('scheduler-handler:checkTemplate', errorMessage);
    context.wazuh.logger.error(schedulerErrorLogColors, errorMessage);
    throw error;
  }
};

async function jobSchedulerRun(context) {
  // Check Kibana index and if it is prepared, start the initialization of Wazuh App.
  await checkPluginPlatformStatus(context);

  for (const job in (0, _configuredJobs.configuredJobs)({})) {
    const schedulerJob = new _index.SchedulerJob(job, context);
    schedulerJobs.push(schedulerJob);

    const task = _nodeCron.default.schedule(_index.jobs[job].interval, () => schedulerJob.run());
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,