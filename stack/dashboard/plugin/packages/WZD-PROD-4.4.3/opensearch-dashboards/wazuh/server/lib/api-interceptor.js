"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.requestAsInternalUser = exports.requestAsCurrentUser = exports.authenticate = void 0;

var _axios2 = _interopRequireDefault(require("axios"));

var _manageHosts = require("./manage-hosts");

var _https = _interopRequireDefault(require("https"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/*
 * Wazuh app - Interceptor API entries
 * Copyright (C) 2015-2022 Wazuh, Inc.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * Find more information about this on the LICENSE file.
 */
const httpsAgent = new _https.default.Agent({
  rejectUnauthorized: false
});

const _axios = _axios2.default.create({
  httpsAgent
});

const manageHosts = new _manageHosts.ManageHosts(); // Cache to save the token for the internal user by API host ID

const CacheInternalUserAPIHostToken = new Map();

const authenticate = async (apiHostID, authContext) => {
  try {
    const api = await manageHosts.getHostById(apiHostID);
    const optionsRequest = {
      method: 'POST',
      headers: {
        'content-type': 'application/json'
      },
      auth: {
        username: api.username,
        password: api.password
      },
      url: `${api.url}:${api.port}/security/user/authenticate${!!authContext ? '/run_as' : ''}`,
      ...(!!authContext ? {
        data: authContext
      } : {})
    };
    const response = await _axios(optionsRequest);
    const token = (((response || {}).data || {}).data || {}).token;

    if (!authContext) {
      CacheInternalUserAPIHostToken.set(apiHostID, token);
    }

    ;
    return token;
  } catch (error) {
    throw error;
  }
};

exports.authenticate = authenticate;

const buildRequestOptions = async (method, path, data, {
  apiHostID,
  forceRefresh,
  token
}) => {
  const api = await manageHosts.getHostById(apiHostID);
  const {
    body,
    params,
    headers,
    ...rest
  } = data;
  return {
    method: method,
    headers: {
      'content-type': 'application/json',
      Authorization: 'Bearer ' + token,
      ...(headers ? headers : {})
    },
    data: body || rest || {},
    params: params || {},
    url: `${api.url}:${api.port}${path}`
  };
};

const requestAsInternalUser = async (method, path, data, options) => {
  try {
    const token = CacheInternalUserAPIHostToken.has(options.apiHostID) && !options.forceRefresh ? CacheInternalUserAPIHostToken.get(options.apiHostID) : await authenticate(options.apiHostID);
    return await request(method, path, data, { ...options,
      token
    });
  } catch (error) {
    if (error.response && error.response.status === 401) {
      try {
        const token = await authenticate(options.apiHostID);
        return await request(method, path, data, { ...options,
          token
        });
      } catch (error) {
        throw error;
      }
    }

    throw error;
  }
};

exports.requestAsInternalUser = requestAsInternalUser;

const requestAsCurrentUser = async (method, path, data, options) => {
  return await request(method, path, data, options);
};

exports.requestAsCurrentUser = requestAsCurrentUser;

const request = async (method, path, data, options) => {
  try {
    const optionsRequest = await buildRequestOptions(method, path, data, options);
    const response = await _axios(optionsRequest);
    return response;
  } catch (error) {
    throw error;
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,