"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.WazuhUtilsRoutes = WazuhUtilsRoutes;

var _controllers = require("../../controllers");

var _configSchema = require("@osd/config-schema");

var _constants = require("../../../common/constants");

/*
 * Wazuh app - Module for Wazuh utils routes
 * Copyright (C) 2015-2022 Wazuh, Inc.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * Find more information about this on the LICENSE file.
 */
function WazuhUtilsRoutes(router) {
  const ctrl = new _controllers.WazuhUtilsCtrl(); // Returns the wazuh.yml file parsed

  router.get({
    path: '/utils/configuration',
    validate: false
  }, async (context, request, response) => ctrl.getConfigurationFile(context, request, response)); // Returns the wazuh.yml file in raw

  router.put({
    path: '/utils/configuration',
    validate: {
      body: _configSchema.schema.object(Object.entries(_constants.PLUGIN_SETTINGS).filter(([, {
        isConfigurableFromFile
      }]) => isConfigurableFromFile).reduce((accum, [pluginSettingKey, pluginSettingConfiguration]) => ({ ...accum,
        [pluginSettingKey]: _configSchema.schema.maybe(pluginSettingConfiguration.validateBackend ? pluginSettingConfiguration.validateBackend(_configSchema.schema) : _configSchema.schema.any())
      }), {}))
    }
  }, async (context, request, response) => ctrl.updateConfigurationFile(context, request, response));
  const pluginSettingsTypeFilepicker = Object.entries(_constants.PLUGIN_SETTINGS).filter(([_, {
    type,
    isConfigurableFromFile
  }]) => type === _constants.EpluginSettingType.filepicker && isConfigurableFromFile);

  const schemaPluginSettingsTypeFilepicker = _configSchema.schema.oneOf(pluginSettingsTypeFilepicker.map(([pluginSettingKey]) => _configSchema.schema.literal(pluginSettingKey))); // Upload an asset


  router.put({
    path: '/utils/configuration/files/{key}',
    validate: {
      params: _configSchema.schema.object({
        // key parameter should be a plugin setting of `filepicker` type
        key: schemaPluginSettingsTypeFilepicker
      }),
      body: _configSchema.schema.object({
        // file: buffer
        file: _configSchema.schema.buffer()
      })
    },
    options: {
      body: {
        maxBytes: _constants.CUSTOMIZATION_ENDPOINT_PAYLOAD_UPLOAD_CUSTOM_FILE_MAXIMUM_BYTES
      }
    }
  }, async (context, request, response) => ctrl.uploadFile(context, request, response)); // Remove an asset

  router.delete({
    path: '/utils/configuration/files/{key}',
    validate: {
      params: _configSchema.schema.object({
        // key parameter should be a plugin setting of `filepicker` type
        key: schemaPluginSettingsTypeFilepicker
      })
    }
  }, async (context, request, response) => ctrl.deleteFile(context, request, response)); // Returns Wazuh app logs

  router.get({
    path: '/utils/logs',
    validate: false
  }, async (context, request, response) => ctrl.getAppLogs(context, request, response));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,