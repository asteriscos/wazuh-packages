"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.formatLabelValuePair = formatLabelValuePair;
exports.formatSettingValueToFile = formatSettingValueToFile;
exports.getCategorySettingByTitle = getCategorySettingByTitle;
exports.getCustomizationSetting = getCustomizationSetting;
exports.getPluginSettingDescription = getPluginSettingDescription;
exports.getSettingDefaultValue = getSettingDefaultValue;
exports.getSettingsByCategories = getSettingsByCategories;
exports.getSettingsDefault = getSettingsDefault;
exports.getSettingsDefaultList = getSettingsDefaultList;
exports.groupSettingsByCategory = groupSettingsByCategory;

var _constants = require("../constants");

var _fileSize = require("./file-size");

/**
 * Look for a configuration category setting by its name
 * @param categoryTitle
 * @returns category settings
 */
function getCategorySettingByTitle(categoryTitle) {
  var _Object$entries$find;

  return (_Object$entries$find = Object.entries(_constants.PLUGIN_SETTINGS_CATEGORIES).find(([key, category]) => (category === null || category === void 0 ? void 0 : category.title) == categoryTitle)) === null || _Object$entries$find === void 0 ? void 0 : _Object$entries$find[1];
}
/**
 * Get the default value of the plugin setting.
 * @param setting setting key
 * @returns setting default value. It returns `defaultValueIfNotSet` or `defaultValue`.
 */


function getSettingDefaultValue(settingKey) {
  return typeof _constants.PLUGIN_SETTINGS[settingKey].defaultValueIfNotSet !== 'undefined' ? _constants.PLUGIN_SETTINGS[settingKey].defaultValueIfNotSet : _constants.PLUGIN_SETTINGS[settingKey].defaultValue;
}

;
/**
 * Get the default settings configuration. key-value pair
 * @returns an object with key-value pairs whose value is the default one
 */

function getSettingsDefault() {
  return Object.entries(_constants.PLUGIN_SETTINGS).reduce((accum, [pluginSettingID, pluginSettingConfiguration]) => ({ ...accum,
    [pluginSettingID]: pluginSettingConfiguration.defaultValue
  }), {});
}

;
/**
 * Get the settings grouped by category
 * @returns an object whose keys are the categories and its value is an array of setting of that category
 */

function getSettingsByCategories() {
  return Object.entries(_constants.PLUGIN_SETTINGS).reduce((accum, [pluginSettingID, pluginSettingConfiguration]) => ({ ...accum,
    [pluginSettingConfiguration.category]: [...(accum[pluginSettingConfiguration.category] || []), { ...pluginSettingConfiguration,
      key: pluginSettingID
    }]
  }), {});
}

;
/**
 * Get the plugin settings as an array
 * @returns an array of plugin setting denifitions including the key
 */

function getSettingsDefaultList() {
  return Object.entries(_constants.PLUGIN_SETTINGS).reduce((accum, [pluginSettingID, pluginSettingConfiguration]) => [...accum, { ...pluginSettingConfiguration,
    key: pluginSettingID
  }], []);
}

;
/**
 * Format the plugin setting value received in the backend to store in the plugin configuration file (.yml).
 * @param value plugin setting value sent to the endpoint
 * @returns valid value to .yml
 */

function formatSettingValueToFile(value) {
  const formatter = formatSettingValueToFileType[typeof value] || formatSettingValueToFileType.default;
  return formatter(value);
}

;
const formatSettingValueToFileType = {
  string: value => `"${value.replace(/"/, '\\"').replace(/\n/g, '\\n')}"`,
  // Escape the " character and new line
  object: value => JSON.stringify(value),
  default: value => value
};
/**
 * Group the settings by category
 * @param settings
 * @returns
 */

function groupSettingsByCategory(settings) {
  const settingsSortedByCategories = settings.sort((settingA, settingB) => {
    var _settingA$key, _settingA$key$localeC;

    return (_settingA$key = settingA.key) === null || _settingA$key === void 0 ? void 0 : (_settingA$key$localeC = _settingA$key.localeCompare) === null || _settingA$key$localeC === void 0 ? void 0 : _settingA$key$localeC.call(_settingA$key, settingB.key);
  }).reduce((accum, pluginSettingConfiguration) => ({ ...accum,
    [pluginSettingConfiguration.category]: [...(accum[pluginSettingConfiguration.category] || []), { ...pluginSettingConfiguration
    }]
  }), {});
  return Object.entries(settingsSortedByCategories).map(([category, settings]) => ({
    category,
    settings
  })).filter(categoryEntry => categoryEntry.settings.length);
}

;
/**
 * Get the plugin setting description composed.
 * @param options
 * @returns
 */

function getPluginSettingDescription({
  description,
  options
}) {
  var _options$file, _options$file2, _options$file2$recomm, _options$file3, _options$file4;

  return [description, ...(options !== null && options !== void 0 && options.select ? [`Allowed values: ${options.select.map(({
    text,
    value
  }) => formatLabelValuePair(text, value)).join(', ')}.`] : []), ...(options !== null && options !== void 0 && options.switch ? [`Allowed values: ${['enabled', 'disabled'].map(s => formatLabelValuePair(options.switch.values[s].label, options.switch.values[s].value)).join(', ')}.`] : []), ...(options !== null && options !== void 0 && options.number && 'min' in options.number ? [`Minimum value: ${options.number.min}.`] : []), ...(options !== null && options !== void 0 && options.number && 'max' in options.number ? [`Maximum value: ${options.number.max}.`] : []), // File extensions
  ...(options !== null && options !== void 0 && (_options$file = options.file) !== null && _options$file !== void 0 && _options$file.extensions ? [`Supported extensions: ${options.file.extensions.join(', ')}.`] : []), // File recommended dimensions
  ...(options !== null && options !== void 0 && (_options$file2 = options.file) !== null && _options$file2 !== void 0 && (_options$file2$recomm = _options$file2.recommended) !== null && _options$file2$recomm !== void 0 && _options$file2$recomm.dimensions ? [`Recommended dimensions: ${options.file.recommended.dimensions.width}x${options.file.recommended.dimensions.height}${options.file.recommended.dimensions.unit || ''}.`] : []), // File size
  ...(options !== null && options !== void 0 && (_options$file3 = options.file) !== null && _options$file3 !== void 0 && _options$file3.size && typeof options.file.size.minBytes !== 'undefined' ? [`Minimum file size: ${(0, _fileSize.formatBytes)(options.file.size.minBytes)}.`] : []), ...(options !== null && options !== void 0 && (_options$file4 = options.file) !== null && _options$file4 !== void 0 && _options$file4.size && typeof options.file.size.maxBytes !== 'undefined' ? [`Maximum file size: ${(0, _fileSize.formatBytes)(options.file.size.maxBytes)}.`] : []), // Multi line text
  ...(options !== null && options !== void 0 && options.maxRows && typeof options.maxRows !== 'undefined' ? [`Maximum amount of lines: ${options.maxRows}.`] : []), ...(options !== null && options !== void 0 && options.minRows && typeof options.minRows !== 'undefined' ? [`Minimum amount of lines: ${options.minRows}.`] : []), ...(options !== null && options !== void 0 && options.maxLength && typeof options.maxLength !== 'undefined' ? [`Maximum lines length is ${options.maxLength} characters.`] : [])].join(' ');
}

;
/**
 * Format the pair value-label to display the pair. If label and the string of value are equals, only displays the value, if not, displays both.
 * @param value
 * @param label
 * @returns
 */

function formatLabelValuePair(label, value) {
  return label !== `${value}` ? `${value} (${label})` : `${value}`;
}

;
/**
 * Get the configuration value if the customization is enabled.
 * @param configuration JSON object from `wazuh.yml`
 * @param settingKey key of the setting
 * @returns 
 */

function getCustomizationSetting(configuration, settingKey) {
  const isCustomizationEnabled = typeof configuration['customization.enabled'] === 'undefined' ? getSettingDefaultValue('customization.enabled') : configuration['customization.enabled'];
  const defaultValue = getSettingDefaultValue(settingKey);

  if (isCustomizationEnabled && settingKey.startsWith('customization') && settingKey !== 'customization.enabled') {
    return typeof configuration[settingKey] !== 'undefined' ? resolveEmptySetting(settingKey, configuration[settingKey]) : defaultValue;
  } else {
    return defaultValue;
  }

  ;
}

;
/**
 * Returns the default value if not set when the setting is an empty string
 * @param settingKey plugin setting
 * @param value value of the plugin setting
 * @returns 
 */

function resolveEmptySetting(settingKey, value) {
  return typeof value === 'string' && value.length === 0 && _constants.PLUGIN_SETTINGS[settingKey].defaultValueIfNotSet ? getSettingDefaultValue(settingKey) : value;
}

;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,